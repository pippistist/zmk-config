#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// changed lwr and rse

#define DEF 0
#define GAM 1
#define RSE 2
#define LWR 3
#define ADJ 4
#define FN  5

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB           &kp Q           &kp W  &kp E  &kp R      &kp T          &kp Y       &kp U      &kp I      &kp O    &kp P      &kp SQT
&mo 1             &kp A           &kp S  &kp D  &kp F      &kp G          &kp H       &kp J      &kp K      &kp L    &kp SEMI
&kp LSHFT         &kp Z           &kp X  &kp C  &kp V      &kp B          &kp N       &kp M      &kp COMMA  &kp DOT  &kp SLASH
&kp LEFT_CONTROL  &lt 5 LEFT_WIN  &mo 2  &mo 4  &kp SPACE  &kp RIGHT_ALT  &lt 8 RGUI  &kp RCTRL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        ctrl_layer {
            bindings = <
&kp LC(Y)           &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &trans  &kp PAGE_UP    &kp LC(LEFT)  &kp UP    &kp LC(RIGHT)  &kp DEL        &kp ESC
&trans              &kp LC(A)  &kp LC(S)  &trans     &kp LC(F)  &trans  &kp PAGE_DOWN  &kp LEFT      &kp DOWN  &kp RIGHT      &kp BACKSPACE
&kp LC(LEFT_SHIFT)  &trans     &trans     &trans     &trans     &trans  &kp HOME       &kp END       &trans    &trans         &trans
&trans              &trans     &trans     &trans     &trans     &trans  &trans         &trans
            >;
        };

        alt_layer {
            bindings = <
&kp LA(TAB)  &trans  &trans     &trans  &trans  &trans  &kp LS(PAGE_UP)    &kp LS(LC(LEFT))  &kp LS(UP)    &kp LS(LC(RIGHT))  &trans     &kp BACKSPACE
&trans       &trans  &kp LA(S)  &trans  &trans  &trans  &kp LS(PAGE_DOWN)  &kp LS(LEFT)      &kp LS(DOWN)  &kp LS(RIGHT)      &kp ENTER
&trans       &trans  &trans     &trans  &trans  &trans  &kp LS(HOME)       &kp LS(END)       &trans        &trans             &trans
&trans       &trans  &trans     &trans  &trans  &trans  &trans             &kp DEL
            >;
        };

        symbol {
            bindings = <
&kp ESC    &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp HASH         &kp PERCENT       &kp PLUS   &kp MINUS  &kp ASTERISK  &kp SLASH      &kp GRAVE
&kp ENTER  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp CARET         &kp UNDERSCORE     &kp LESS_THAN    &kp GREATER_THAN  &kp EQUAL  &kp COMMA  &kp PERIOD    &kp DOLLAR
&trans     &trans                &trans                 &kp TILDE         &kp PIPE           &kp EXCLAMATION  &kp AMPERSAND     &kp AT     &trans     &trans        &kp BACKSLASH
&trans     &trans                &trans                 &none             &trans             &trans           &none             &trans
            >;
        };

        number {
            bindings = <
&kp ESCAPE     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0   &kp GRAVE
&kp ENTER      &trans        &trans        &trans        &trans        &trans        &trans        &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp BACKSPACE
&kp LS(ENTER)  &trans        &trans        &trans        &trans        &trans        &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD
&trans         &trans        &trans        &trans        &kp SPACE     &trans        &mo 7         &trans
            >;
        };

        media {
            bindings = <
&kp C_MUTE        &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans              &trans  &trans  &trans  &trans           &trans  &trans     &kp LG(P)  &kp LA(F4)
&kp C_PLAY_PAUSE  &kp C_PREV         &kp C_NEXT       &kp C_FAST_FORWARD  &trans  &trans  &trans  &trans           &trans  &kp LG(L)  &trans
&trans            &trans             &trans           &trans              &trans  &trans  &trans  &trans           &trans  &trans     &trans
&trans            &trans             &trans           &trans              &trans  &trans  &none   &kp LC(LA(DEL))
            >;
        };

        game {
            bindings = <
&kp TAB       &kp Q  &kp W         &kp E      &kp R      &kp T     &kp Y       &kp U      &kp I      &kp O    &kp P      &kp BSPC
&kp CAPSLOCK  &kp A  &kp S         &kp D      &kp F      &kp G     &kp H       &kp J      &kp K      &kp L    &kp ENTER
&kp LSHFT     &kp Z  &kp X         &kp C      &kp V      &kp B     &kp N       &kp M      &kp COMMA  &kp DOT  &kp FSLH
&kp LCTRL     &mo 4  &kp LEFT_ALT  &kp SPACE  &kp SPACE  &kp RALT  &lt 8 RGUI  &kp RCTRL
            >;
        };

        adjust_layer {
            bindings = <
&ext_power EXT_POWER_TOGGLE_CMD  &none            &none            &none            &none            &none            &none     &none            &none  &kp MINUS  &kp EQUAL  &none
&none                            &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF  &kp HOME  &none            &none  &kp END    &none
&none                            &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &none     &none            &none  &none      &none
&none                            &none            &none            &none            &none            &none            &none     &rgb_ug RGB_TOG
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        fn_layer {
            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6        &kp F7  &kp F8  &kp F9  &kp F10  &kp F11      &kp F12
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none   &none   &none   &none    &sys_reset
&none       &out OUT_USB  &out OUT_BLE  &out OUT_TOG  &none         &none         &none   &none   &none   &none    &bootloader
&to 0       &to 6         &none         &mo 7         &none         &none         &trans  &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };
    };
};
